#Использовать logos

#Область ОписаниеПеременных

Перем ВерсияПлагина;
Перем Лог;  // Модуль
Перем КомандыПлагина;  // Массив Из Строка
Перем ВыгружатьОтчет;  // Булево
Перем ПутьВыгрузкиОтчетов;  // Строка

#КонецОбласти

#Область Интерфейс_плагина

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат "0.0.1";
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - приоритет выполнения плагина
//
Функция Приоритет() Экспорт
	Возврат 0;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание функциональности плагина
//
Функция Описание() Экспорт
	Возврат "Плагин для выгрузки отчета о истории версий с авторами хранилища 1С";
КонецФункции

// Возвращает подробную справку к плагину 
//
//  Возвращаемое значение:
//   Строка - подробная справка для плагина
//
Функция Справка() Экспорт
	Возврат "Справка плагина";
КонецФункции

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - имя плагина при подключении
//
Функция Имя() Экспорт
	Возврат "export-report";
КонецФункции 

// Возвращает имя лога плагина
//
//  Возвращаемое значение:
//   Строка - имя лога плагина
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.gitsync.plugins-itworks.exportReport";
КонецФункции

Процедура Инициализация()

	ВерсияПлагина = Версия();
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

	// ВыгружатьОтчет = Ложь;
	// ПутьВыгрузкиОтчетов = ""

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_события

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации) Экспорт

	Лог.Отладка("Ищю команду <%1> в списке поддерживаемых", ИмяКоманды);

	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);

	КлассРеализации.Опция(
		"export-report",
		Ложь,
		"[*export-report] Флаг плагина export-report"
	).Флаговый();

	КлассРеализации.Опция(
		"export-report-dir",
		"",
		"[*export-report-dir] путь выгрузки отчета"
	).ТСтрока()
	.Обязательный(Истина);
	
КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды) Экспорт

	ВыгружатьОтчет = ПараметрыКоманды.Параметр("--export-report", Ложь);
	Лог.Информация("ВыгружатьОтчет <%1>", ВыгружатьОтчет);
	
	ПутьВыгрузкиОтчетов = ПараметрыКоманды.Параметр("--export-report-dir", "");

	Если ВыгружатьОтчет Тогда
		Лог.Информация("Включена выгрузка отчета истории хранилища");
		Лог.Информация("Путь выгрузки отчета истории хранилища <%1>", ПутьВыгрузкиОтчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПередНачаломЦиклаОбработкиВерсий(
	ТаблицаИсторииХранилища,
	ТекущаяВерсия,
	СледующаяВерсия,
	МаксимальнаяВерсияДляРазбора
) Экспорт
	Если Не ВыгружатьОтчет Тогда
		Возврат;
	КонецЕсли;

	ПутьФайла = СтрШаблон(
		"%1/%2-%3.json",
		ПутьВыгрузкиОтчетов,
		ТекущаяВерсия,
		МаксимальнаяВерсияДляРазбора
	);
	ВыгрузитьТаблицуИсторииХранилища(ТаблицаИсторииХранилища, ПутьФайла);

КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Процедура ВыгрузитьТаблицуИсторииХранилища(ТаблицаИсторииХранилища, ПутьФайла, Кодировка="utf-8")
	Сериализат = ПреобразоватьТаблицуВJSON(ТаблицаИсторииХранилища);
	
	ЗаписатьТекстовыйДокумент(ПутьФайла, Кодировка, Сериализат);

КонецПроцедуры

Функция ПреобразоватьТаблицуВJSON(данные)
	ПарсерJSON = Новый ПарсерJSON();

	Возврат ПарсерJSON.ЗаписатьJSON(данные);

КонецФункции

Процедура ЗаписатьТекстовыйДокумент(Путь, Кодировка, Содержимое)
	ТД = Новый ТекстовыйДокумент();
    
	ТД.ДобавитьСтроку(Содержимое);

	ТД.Записать(Путь, Кодировка);

КонецПроцедуры

#КонецОбласти

Инициализация();
